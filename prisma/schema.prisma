// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator zod {
  provider         = "zod-prisma-types"
  createModelTypes = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN  @map("admin")
  MEMBER @map("member")
}

model User {
  id          String       @id @map("_id")
  name        String
  role        Role         @default(MEMBER)
  collections Collection[]
  Group       Group[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum Color {
  GRAY   @map("gray")
  RED    @map("red")
  BLUE   @map("blue")
  GREEN  @map("green")
  YELLOW @map("yellow")
  ORANGE @map("orange")
}

enum PropertyType {
  TEXT     @map("text")
  SELECT   @map("select")
  CHECKBOX @map("checkbox")
  URL      @map("url")
  DATE     @map("date")
  NUMBER   @map("number")
}

enum Aggregator {
  NONE            @map("none")
  COUNT           @map("count")
  COUNT_EMPTY     @map("count_empty")
  COUNT_NOT_EMPTY @map("count_not_empty")
  SUM             @map("sum")
  AVG             @map("avg")
}

type Option {
  id    String @default(uuid()) @map("_id")
  value String
  color Color  @default(GRAY)
}

type Property {
  id                   String       @default(uuid()) @map("_id")
  name                 String
  createdAt            DateTime     @default(now())
  type                 PropertyType @default(TEXT)
  options              Option[]
  isVisibleOnListView  Boolean      @default(true)
  isVisibleOnTableView Boolean      @default(true)
  aggregator           Aggregator   @default(NONE)
  defaultValue         String       @default("")
}

type PropertyRef {
  id    String @map("_id")
  value String @default("")
}

model Group {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  Collection Collection[]
}

model Collection {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isFavourite  Boolean    @default(false)
  isArchived   Boolean    @default(false)
  description  String     @default("")
  isDescHidden Boolean    @default(true)
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  items        Item[]
  groupItemsBy String?
  properties   Property[]
  group        Group?     @relation(fields: [groupId], references: [id])
  groupId      String?    @db.ObjectId
  icon         String     @default("folder")

  @@index([properties.id], name: "property_id_index")
  @@index([properties.options.id], name: "property_option_id_index")
}

model Item {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  collection   Collection    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String        @db.ObjectId
  properties   PropertyRef[]

  @@index([properties.id], name: "propertyref_id_index")
}

type TemplateItem {
  id         String        @default(uuid()) @map("_id")
  name       String
  properties PropertyRef[]
}

model Template {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String         @default("")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  properties  Property[]
  items       TemplateItem[]
  icon        String         @default("folder")
}
