// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  createModelTypes = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @map("_id")
  email                  String                   @unique
  email_verified         Boolean
  auth_session           Session[]
  key                    Key[]
  EmailVerificationToken EmailVerificationToken[]
  PasswordResetToken     PasswordResetToken[]
  name                   String
  collections            Collection[]
  updatedItems           Item[]
  Group                  Group[]
}

model Session {
  id             String @id @map("_id")
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @map("_id")
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model EmailVerificationToken {
  id      String @id @map("_id")
  expires BigInt
  user_id String
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model PasswordResetToken {
  id      String @id @map("_id")
  expires BigInt
  user_id String
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

enum Color {
  GRAY   @map("gray")
  RED    @map("red")
  BLUE   @map("blue")
  GREEN  @map("green")
  YELLOW @map("yellow")
}

enum PropertyType {
  TEXT     @map("text")
  SELECT   @map("select")
  CHECKBOX @map("checkbox")
  URL      @map("url")
  DATE     @map("date")
  NUMBER   @map("number")
}

type Icon {
  name  String @default("")
  color Color  @default(GRAY)
}

type Option {
  id    String @default(uuid()) @map("_id")
  value String
  color Color  @default(GRAY)
}

type CollectionProperty {
  id                   String       @default(uuid()) @map("_id")
  name                 String
  createdAt            DateTime     @default(now())
  type                 PropertyType @default(TEXT)
  options              Option[]
  isVisibleOnListView  Boolean      @default(true)
  isVisibleOnTableView Boolean      @default(true)
}

type ItemProperty {
  id    String @map("_id")
  value String @default("")
}

model Group {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  owner      User         @relation(fields: [ownerId], references: [id])
  ownerId    String
  Collection Collection[]
}

model Collection {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  isFavourite  Boolean              @default(false)
  isArchived   Boolean              @default(false)
  description  String               @default("")
  isDescHidden Boolean              @default(false)
  owner        User                 @relation(fields: [ownerId], references: [id])
  ownerId      String
  items        Item[]
  properties   CollectionProperty[]
  group        Group?               @relation(fields: [groupId], references: [id])
  groupId      String?              @db.ObjectId
}

model Item {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  updatedByUserId String?
  updatedBy       User?          @relation(fields: [updatedByUserId], references: [id])
  collection      Collection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId    String         @db.ObjectId
  properties      ItemProperty[]
}
