// Solution for undefined enum: https://github.com/prisma/prisma/discussions/20575#discussioncomment-9204363

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator zod {
  provider         = "zod-prisma-types"
  createModelTypes = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN  @map("admin")
  MEMBER @map("member")
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String               @unique
  emailVerified      Boolean              @default(false)
  role               Role                 @default(MEMBER)
  password           String
  sessions           Session[]
  collections        Collection[]
  Group              Group[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  EmailVerication    EmailVerication[]
  PasswordResetToken PasswordResetToken[]
}

model EmailVerication {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  userId    String   @db.ObjectId
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  email     String   @unique
  expiredAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  expiredAt DateTime
}

model Session {
  id        String   @id @map("_id")
  userId    String   @db.ObjectId
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  expiresAt DateTime
  role      Role
}

enum Color {
  GRAY   @map("gray")
  RED    @map("red")
  BLUE   @map("blue")
  GREEN  @map("green")
  YELLOW @map("yellow")
  ORANGE @map("orange")
}

enum PropertyType {
  TEXT     @map("text")
  SELECT   @map("select")
  CHECKBOX @map("checkbox")
  URL      @map("url")
  DATE     @map("date")
  NUMBER   @map("number")
}

enum Aggregator {
  NONE            @map("none")
  COUNT           @map("count")
  COUNT_EMPTY     @map("count_empty")
  COUNT_NOT_EMPTY @map("count_not_empty")
  SUM             @map("sum")
  AVG             @map("avg")
}

enum View {
  LIST  @map("list")
  TABLE @map("table")
}

type Filter {
  id     String
  values String[]
}

type FilterConfig {
  view    View
  filters Filter[]
}

type GroupByConfig {
  view       View
  propertyId String @default("")
}

type Option {
  id    String @default(uuid()) @map("_id")
  value String
  color Color  @default(GRAY)
}

type Property {
  id             String       @default(uuid()) @map("_id")
  name           String
  createdAt      DateTime     @default(now())
  type           PropertyType @default(TEXT)
  options        Option[]
  visibleInViews View[]       @default([LIST, TABLE])
  aggregator     Aggregator   @default(NONE)
  defaultValue   String       @default("")
}

type PropertyRef {
  id    String @map("_id")
  value String @default("")
}

model Group {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String       @db.ObjectId
  Collection Collection[]
}

model Collection {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isPinned       Boolean         @default(true)
  description    String          @default("")
  isDescHidden   Boolean         @default(true)
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String          @db.ObjectId
  items          Item[]
  groupByConfigs GroupByConfig[]
  properties     Property[]
  group          Group?          @relation(fields: [groupId], references: [id])
  groupId        String?         @db.ObjectId
  icon           String          @default("folder")
  filterConfigs  FilterConfig[]

  @@index([properties.id], name: "property_id_index")
  @@index([properties.options.id], name: "property_option_id_index")
}

model Item {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  collection   Collection    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String        @db.ObjectId
  properties   PropertyRef[]

  @@index([properties.id], name: "propertyref_id_index")
}

type TemplateItem {
  id         String        @default(uuid()) @map("_id")
  name       String
  properties PropertyRef[]
}

model Template {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String          @default("")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  properties     Property[]
  items          TemplateItem[]
  groupByConfigs GroupByConfig[]
  icon           String          @default("folder")
}
